// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SuperTraders.Data;

#nullable disable

namespace SuperTraders.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220125194623_UserAddBalance")]
    partial class UserAddBalance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SuperTraders.Core.Entities.BuyOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTransactionPerformed")
                        .HasColumnType("boolean");

                    b.Property<int>("RemainingAmount")
                        .HasColumnType("integer");

                    b.Property<string>("ShareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShareId");

                    b.HasIndex("UserId");

                    b.ToTable("BuyOrders");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.SellOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTransactionPerformed")
                        .HasColumnType("boolean");

                    b.Property<int>("RemainingAmount")
                        .HasColumnType("integer");

                    b.Property<string>("ShareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShareId");

                    b.HasIndex("UserId");

                    b.ToTable("SellOrders");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.Share", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Shares");

                    b.HasData(
                        new
                        {
                            Id = "cfcb3110-e01e-41f0-90b4-f89d395d6b30",
                            Code = "LIP",
                            Name = "Lorem Ipsum"
                        },
                        new
                        {
                            Id = "32750800-9460-4a0c-9fb5-487cb76a14ff",
                            Code = "DSA",
                            Name = "Dolor Sit Amer"
                        },
                        new
                        {
                            Id = "4ca0cf43-3352-4202-ae9d-44310bcc8891",
                            Code = "CAE",
                            Name = "Consectetur Adipiscing Elit"
                        });
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("BuyOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SellOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuyOrderId")
                        .IsUnique();

                    b.HasIndex("SellOrderId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEMailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "b8e7456f-4eee-4ced-96ac-bc3c6ef77c44",
                            AuthToken = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiIiwibmJmIjoxNjQzMTM1NDU0LCJleHAiOjE2NDU3Mjc0NTQsImlhdCI6MTY0MzEzNTQ1NH0.jb-M5NOTieF1GDR1mHsc9YtFLKUB4uSjZVSfZbh-APg",
                            Balance = 0f,
                            EMail = "osman@zulfigaroglu.com",
                            IsEMailVerified = false,
                            Password = "123456",
                            UserName = "osman"
                        },
                        new
                        {
                            Id = "7d61da45-725a-4dbe-8fb5-a5172f2aa481",
                            AuthToken = "",
                            Balance = 0f,
                            EMail = "lorem@ipsum.com",
                            IsEMailVerified = false,
                            Password = "123456",
                            UserName = "lorem"
                        },
                        new
                        {
                            Id = "fad28c98-06fc-45b2-8678-ab6ba5faece3",
                            AuthToken = "",
                            Balance = 0f,
                            EMail = "dolor@sitamet.com",
                            IsEMailVerified = false,
                            Password = "123456",
                            UserName = "dolor"
                        });
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.UserShare", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("ShareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShareId");

                    b.HasIndex("UserId");

                    b.ToTable("UserShare");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.BuyOrder", b =>
                {
                    b.HasOne("SuperTraders.Core.Entities.Share", "Share")
                        .WithMany()
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperTraders.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.SellOrder", b =>
                {
                    b.HasOne("SuperTraders.Core.Entities.Share", "Share")
                        .WithMany()
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperTraders.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.Transaction", b =>
                {
                    b.HasOne("SuperTraders.Core.Entities.BuyOrder", "BuyOrder")
                        .WithOne("Transaction")
                        .HasForeignKey("SuperTraders.Core.Entities.Transaction", "BuyOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperTraders.Core.Entities.SellOrder", "SellOrder")
                        .WithOne("Transaction")
                        .HasForeignKey("SuperTraders.Core.Entities.Transaction", "SellOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyOrder");

                    b.Navigation("SellOrder");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.UserShare", b =>
                {
                    b.HasOne("SuperTraders.Core.Entities.Share", "Share")
                        .WithMany("UserShares")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperTraders.Core.Entities.User", "User")
                        .WithMany("UserShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Share");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.BuyOrder", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.SellOrder", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.Share", b =>
                {
                    b.Navigation("UserShares");
                });

            modelBuilder.Entity("SuperTraders.Core.Entities.User", b =>
                {
                    b.Navigation("UserShares");
                });
#pragma warning restore 612, 618
        }
    }
}
